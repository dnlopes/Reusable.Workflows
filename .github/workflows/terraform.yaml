name: Terraform
on:
  workflow_call:
    inputs:
      action:
        required: true
        description: "The type of action to execute in Spacelift (preview, deploy)"
        type: string
      concurrency_group:
        required: false
        description: "Name of concurrency group to manage concurrent Github action runs"
        type: string
        default: ${{ github.repository }}
      working_dir:
        required: false
        description: "The directory in which the TF project is."
        type: string
        default: ./
      sec_validation_depdendencies:
        required: false
        description: "Whether or not to include dependent modules in security validations."
        type: boolean
        default: false
    secrets:
      GH_API_TOKEN:
        required: true
      INFRACOST_API_KEY:
        required: false

jobs:
  terraform-linters:
    if: ${{ github.event.type }} == "pull_request"
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: ${{ inputs.concurrency_group }}-terraform-linters
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        id: init
        working-directory: ${{ inputs.working_dir }}
        run: terraform init -reconfigure -upgrade

      - name: Terraform validate
        working-directory: ${{ inputs.working_dir }}
        run: terraform validate

      - name: Terraform fmt
        working-directory: ${{ inputs.working_dir }}
        run: terraform fmt -check -recursive

      - name: Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ${{ inputs.working_dir }}
          trivy-config: trivy.yaml

      - name: Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ inputs.working_dir }}
          quiet: true # optional: display only failed checks
          soft_fail: false # optional: do not return an error code if there are failed checks
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: github_failed_only # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          download_external_modules: ${{ inputs.sec_validation_depdendencies }}
          var_file: ${{ inputs.working_dir }}/configs/dev.tfvars # optional: variable files to load in addition to the default files. Currently only supported for source Terraform and Helm chart scans.

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint

      #- name: Run TFLint
      #  run: tflint --format compact

  terraform-run:
    name: ${{ inputs.action }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      id-token: write
    concurrency:
      group: ${{ inputs.concurrency_group }}-terraform-run
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::156589501431:role/GitHubActions
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        id: init
        working-directory: ${{ inputs.working_dir }}
        run: terraform init -reconfigure -upgrade

      - uses: robburger/terraform-pr-commenter@v1
        name: PR comment (init)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}

  infracost:
    if: ${{ github.event.type }} == "pull_request"
    name: Infracost
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    concurrency:
      group: ${{ inputs.concurrency_group }}-infracost
      cancel-in-progress: true

    steps:
      - name: Setup
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: "${{ github.event.pull_request.base.ref }}"

      # Generate Infracost JSON file as the baseline.
      - name: Generate baseline
        run: infracost breakdown --path=${TF_ROOT} --format=json --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate cost diff
        run: infracost diff --path=${TF_ROOT} --format=json --compare-to=/tmp/infracost-base.json --out-file=/tmp/infracost.json

      - name: PR comment
        run: infracost comment github --path=/tmp/infracost.json --repo=$GITHUB_REPOSITORY --github-token=${{github.token}} --pull-request=${{github.event.pull_request.number}} --behavior=delete-and-new
