on:
  workflow_call:
    inputs:
      golangProjectDir:
        required: false
        type: string
        default: .
        description: path of the Golang project, relative to the root of the repository
      goVersion:
        required: false
        type: string
        default: "1.22"
      ignoreErrors:
        required: false
        type: boolean
        default: false
        description: whether or not to ignore errors
    secrets:
      CODECOV_TOKEN:
        required: true
env:
  CHECK_NAME: Golang checks

jobs:
  golang:
    name: Build and test
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required: allow read access to the content for analysis.
      pull-requests: read # Optional: allow read access to pull request. Use with `only-new-issues` option.
      checks: write # Optional: allow write access to checks to allow the action to annotate code in the PR.
      statuses: write # needed for setting the status of the PR
    defaults:
      run:
        working-directory: ${{ inputs.golangProjectDir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

      - name: Set status pending
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=pending" -f "description=Golang checks are running" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Checkout reusable-workflows repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
        with:
          repository: dnlopes/github-workflows
          path: actions

      - name: Install tools
        uses: ./actions/.github/actions/install-common-tools
        with:
          goVersion: ${{ inputs.goVersion }}

      - name: Dependencies
        run: go get .

      - name: Build
        run: go build -o main ./...

      - name: Test
        run: go test -race -coverprofile=coverage.out -covermode=atomic

      - uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4
        name: Upload coverage to Codecov
        with:
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6
        continue-on-error: true
        with:
          version: latest
          working-directory: ${{ inputs.golangProjectDir }}

      - name: Set status success
        if: ${{ success() || inputs.IgnoreErrors == true }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=success" -f "description=Golang checks were successful" \
            -f "context=${{ env.CHECK_NAME }}"

      - name: Set status failure
        if: ${{ failure() && inputs.IgnoreErrors == false }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f "state=failure" -f "description=Golang checks failed validations!" \
            -f "context=${{ env.CHECK_NAME }}"
